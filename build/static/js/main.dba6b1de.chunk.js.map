{"version":3,"sources":["pages/Home.js","router.config.js","pages/Doc.js","pages/Core.js","pages/Guide.js","pages/Api.js","pages/Hooks.js","App.js","serviceWorker.js","index.js"],"names":["Header","activeClassName","exact","to","routes","path","component","props","console","log","style","textAlign","onClick","history","push","withRouter","className","map","route","i","key","from","pri","localStorage","setItem","replace","location","state","PrivateRoute","Com","rest","render","getItem","pathname","RouteWithSubRoutes","App","Routes","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dba6b1de.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./header.css\"\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst Home = (props) => {\r\n    console.log(props);\r\n    return (\r\n        <div style={{textAlign:'center'}}>\r\n            <h2>React</h2>\r\n            <p>用于构建用户界面的 JavaScript 库</p>\r\n            <div>\r\n                <button onClick={\r\n                    ()=>props.history.push('/doc')\r\n                }>快速开始</button>\r\n                <button onClick={\r\n                    ()=>props.history.push('/tuto')\r\n                }>入门教程</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <nav>\r\n                <NavLink activeClassName='active' exact to='/'>React</NavLink>\r\n                <NavLink activeClassName='active' to='/doc'>文档</NavLink>\r\n                <NavLink activeClassName='active' to='/tuto'>教程</NavLink>\r\n                <NavLink activeClassName='active' to='/blog'>博客</NavLink>\r\n                <NavLink activeClassName='active' to='/comm'>社区</NavLink>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst Blog = () => {\r\n    return (\r\n        <div>\r\n            Blog\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Comm = () => {\r\n    return (\r\n        <div>\r\n            Comm\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Login = (props) => {\r\n    const login = ()=>{\r\n        localStorage.setItem('userinfo','tom')\r\n        props.history.replace(props.location.state)\r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={login}>登录</button>\r\n        </div>\r\n    )\r\n}\r\nconst Tuto = () => {\r\n    return (\r\n        <div>\r\n            Tuto\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {Home}\r\nexport {Header}\r\nexport {Comm}\r\nexport {Blog}\r\nexport {Login}\r\nexport {Tuto}\r\n\r\n","import {Home} from './pages/Home';\r\nimport Doc from './pages/Doc';\r\nimport {Tuto} from './pages/Home';\r\nimport {Blog} from './pages/Home';\r\nimport {Comm} from './pages/Home';\r\nimport {Login} from './pages/Home';\r\nimport Core from './pages/Core';\r\nimport Guide from './pages/Guide';\r\nimport Api from './pages/Api';\r\nimport Hooks from './pages/Hooks';\r\n// import DocContent from './pages/DocContent';\r\nconst routes = [\r\n    {\r\n        path: '/',\r\n        exact: true,\r\n        component: Home\r\n    },\r\n    {\r\n        path: '/doc',\r\n        component: Doc,\r\n        pri: true,\r\n        routes: [\r\n            {\r\n                path: '/doc/core',\r\n                component: Core,\r\n            },\r\n            {\r\n                path: '/doc/guide',\r\n                component:Guide,\r\n            },\r\n            {\r\n                path: '/doc/api',\r\n                component:Api,\r\n            },\r\n            {\r\n                path: '/doc/hooks',\r\n                component: Hooks,\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        path: '/tuto',\r\n        component: Tuto,\r\n        pri: true\r\n    },\r\n    {\r\n        path: '/blog',\r\n        component: Blog\r\n    },\r\n    {\r\n        path: '/comm',\r\n        component: Comm\r\n    },\r\n    {\r\n        path: '/login',\r\n        component: Login\r\n    },\r\n]\r\nexport default routes;","import React, { useEffect } from 'react'\r\nimport {\r\n    NavLink, Route, Redirect,\r\n    useHistory,\r\n    useLocation,\r\n    useParams,\r\n    useRouteMatch,\r\n    withRouter,\r\n    Switch\r\n} from 'react-router-dom'\r\nimport './doc.css';\r\n// import {NavBar,Icon} from 'antd-mobile'\r\nimport routes from '../router.config';\r\nimport {RouteWithSubRoutes} from '../App';\r\n// const DocContent = (props) => {\r\n//     return <h1>\r\n//         { props.match.params.type }\r\n//     </h1> \r\n// }\r\nconst Doc = ({routes}) => {\r\n    // console.log(props)\r\n    // const history = useHistory();\r\n    // const location = useLocation();\r\n    // const par = useParams();\r\n    // const mat = useRouteMatch();\r\n    // console.log(history);\r\n    // console.log(location);\r\n    // console.log(par);\r\n    // console.log(mat);\r\n    // useEffect(()=>{\r\n    //     if(!localStorage.getItem('userinfo')){\r\n    //         props.history.push({\r\n    //             pathname:'/login',\r\n    //             state:props.location\r\n    //         })\r\n    //     }\r\n    // },[])\r\n    return (\r\n        <div className='doc'>\r\n            <div className=\"content\">\r\n                <Switch>\r\n                    {routes.map((route,i) => (\r\n                        <RouteWithSubRoutes key={i} {...route} />\r\n                    ))}\r\n                </Switch>\r\n                {/* <Route path='/doc/:type' component={ DocContent } /> */}\r\n                <Redirect from='/doc' to='/doc/core' />\r\n            </div>\r\n            <ol>\r\n                <li><NavLink to='/doc/core'>核心概念</NavLink></li>\r\n                <li><NavLink to='/doc/guide'>高级指引</NavLink></li>\r\n                <li><NavLink to='/doc/api'>API</NavLink></li>\r\n                <li><NavLink to='/doc/hooks'>Hooks</NavLink></li>\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Doc);","import React from 'react'\r\n\r\nconst Core=()=> {\r\n    return (\r\n        <h2>\r\n            Core\r\n        </h2>\r\n    )      \r\n}\r\n\r\nexport default Core","import React from 'react'\r\n\r\nconst Guide=()=> {\r\n    return (\r\n        <h2>\r\n            Guide\r\n        </h2>\r\n    )      \r\n}\r\n\r\nexport default Guide","import React from 'react'\r\n\r\nconst Api=()=> {\r\n    return (\r\n        <h2>\r\n            Api\r\n        </h2>\r\n    )      \r\n}\r\n\r\nexport default Api","import React from 'react'\r\n\r\nconst Hooks=()=> {\r\n    return (\r\n        <h2>\r\n            Hooks\r\n        </h2>\r\n    )      \r\n}\r\n\r\nexport default Hooks","import React from 'react';\nimport { HashRouter as Router, Redirect, Route, NavLink, Switch } from 'react-router-dom'\nimport { Header } from './pages/Home';\nimport Routes from './router.config';\n// import {Button,TabBar} from 'antd-mobile';\n\n\nfunction PrivateRoute({ component:Com, ...rest }) {\n\treturn (\n\t  <Route\n\t\t{...rest}\n\t\trender={({ location }) =>\n\t\t   localStorage.getItem('userinfo')\n\t\t   ?<Com {...rest} /> \n\t\t   : (\n\t\t\t<Redirect\n\t\t\t  to={{\n\t\t\t\tpathname: \"/login\",\n\t\t\t\tstate: location \n\t\t\t  }}\n\t\t\t/>\n\t\t  )\n\t\t}\n\t  />\n\t);\n  }\n\nexport const RouteWithSubRoutes=(route)=> {\n\tif(route.pri){\n\t\treturn <PrivateRoute {...route}  routes={route.routes}></PrivateRoute>\n\t}else{\n\t\treturn (\n\t\t\t<Route\n\t\t\t  path={route.path}\n\t\t\t  render={props => (\n\t\t\t\t<route.component {...props} routes={route.routes} />\n\t\t\t  )}\t\n\t\t\t/>\n\t\t  );\n\t}\n  }\n\n  const App = ()=>{\n\treturn <Router>\n\t\t<Header/>\n\t\t<Switch>\n\t\t\t{\n\t\t\t\tRoutes.map(({...rest})=>{\n\t\t\t\t\treturn <RouteWithSubRoutes {...rest}/>\n\t\t\t\t})\n\t\t\t}\n\t\t</Switch>\n\t\t</Router>\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}